@using HomeERP.Domain.EAV.Models
@model List<Entity>

@using (Html.BeginForm("CreateEntity", "EAV", FormMethod.Post, new { id = "formCreateEntity" }))
{
    <div class="modal fade" id="CreateEntityModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Создание сущности</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Укажите название сущности</label>
                        <input class="form-control" type="text" name="EntityName" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Укажите атрибуты:</label>
                        <div class="d-flex flex-column gap-2" id="fieldsContainer">
                        </div>
                    </div>

                    <button type="button" class="remove-field btn btn-primary" id="addField">Добавить поле</button>


                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Отмена</button>
                    <button type="submit" class="btn btn-primary">Создать</button>
                </div>
            </div>
        </div>
    </div>
}

<script>
    let fieldCount = 0;

    document.getElementById('addField').addEventListener('click', function() {
        const fieldsContainer = document.getElementById('fieldsContainer');
        const fieldGroup = document.createElement('div');
        fieldGroup.classList.add('field-group');

        fieldGroup.innerHTML = `
            <div class="d-flex flex-row justify-content-around">
                <input class="form-control me-2" name="RawAttributes[${fieldCount}].AttributeName" type="text" placeholder="Название поля" required>
                <select id="firstSelect[${fieldCount}]" class="form-select ms-2 me-2" name="RawAttributes[${fieldCount}].AttributeType" onchange="showSecondSelectCreateEntity(${fieldCount})" required>
                    <option value="Integer">Число</option>
                    <option value="String">Текст</option>
                    <option value="Date">Дата</option>
                    <option value="Link">Ссылка на объект</option>
                    <option value="File">Файл</option>
                    <option value="Float">Дробь</option>
                </select>
                <select id="secondSelect[${fieldCount}]" class="form-select ms-2 me-2" style="display: none;" name="RawAttributes[${fieldCount}].Args[0]">
                @foreach(Entity Entity in Model ?? new List<Entity>())
                {
                    <option value=@Entity.Id>@Entity.Name</option>
                }
                </select>
                <button type="button" class="remove-field btn btn-danger ms-2">Удалить</button>
            </div>
        `;

        fieldsContainer.appendChild(fieldGroup);
        fieldCount++;

        fieldGroup.querySelector('.remove-field').addEventListener('click', function() {
            fieldsContainer.removeChild(fieldGroup);
            fieldCount--;
        });
    });

        document.getElementById('formCreateEntity').addEventListener('submit', function() {
        const container = document.getElementById('fieldsContainer'); // ваш контейнер
        const items = container.querySelectorAll('.field-group'); // все добавленные блоки

        items.forEach((item, index) => {
            // Обновляем id контейнера (если нужно)
            item.id = 'field_' + index;

            // Обновляем input name
            const input = item.querySelector('input[type=text]');
            if (input) {
                input.setAttribute('name', `RawAttributes[${index}].AttributeName`);
            }

            // Обновляем первый селект (AttributeType)
            const select1 = item.querySelector('select[id^="firstSelect"]');
            if (select1) {
                select1.setAttribute('name', `RawAttributes[${index}].AttributeType`);
            }

            // Обновляем второй селект (Args[0])
            const select2 = item.querySelector('select[id^="secondSelect"]');
            if (select2) {
                select2.setAttribute('name', `RawAttributes[${index}].Args[0]`);
            }

            // Обновляем кнопку удаления (если она использует индекс для этой функции)
            const btn = item.querySelector('.remove-field');
            if (btn) {
                btn.setAttribute('onclick', `removeField(${index})`);
            }
        });
    });

    function showSecondSelectCreateEntity(a) {
        const firstSelect = document.getElementById('firstSelect[' + a + ']');
        const secondSelect = document.getElementById('secondSelect[' + a + ']');

        if (firstSelect.value === 'Link') {
            secondSelect.style.display = 'block';
        } else {
            secondSelect.style.display = 'none';
        }
    }
</script>
